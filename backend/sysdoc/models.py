#Model generated by the Generate Export to Django Model Plugin
#Created by Naylor Garcia Bachiega
#https://github.com/naylor

from django.db import models
from uuid import uuid4
import os
from django.contrib.auth.models import User  # Importando o modelo User do Django
from django.conf import settings

class Processo(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid4, editable=False)
    nome = models.CharField(max_length=100)
    inicio = models.DateTimeField(blank=True)
    fim = models.DateTimeField(blank=True)
    descricao = models.TextField(max_length=200, blank=True, null=True)
    observacao = models.TextField(blank=True, null=True)
    pontos = models.IntegerField(blank=True)

    def __str__(self):
        return f"{self.nome}"
    
class Itemizacao(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid4, editable=False)
    nome = models.CharField(max_length=100, unique=True)
    descricao = models.TextField(max_length=200, blank=True, null=True)
    processo = models.ForeignKey(Processo, on_delete=models.CASCADE)
    itemSuperior = models.ForeignKey(
        'self', on_delete=models.CASCADE, blank=True, null=True, related_name='subitems'
    )
    ordem = models.PositiveIntegerField(default=0)  # <-- Adicionado campo de ordenação

    class Meta:
        ordering = ['ordem', 'nome']  # Ordena por ordem, depois nome

    def __str__(self):
        return self.nome


class TarefaProcesso(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid4, editable=False)
    nome = models.CharField(max_length=100)
    ponto = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        blank=True,
        null=True 
    )
    minimo = models.IntegerField(blank=True)
    maximo = models.IntegerField(blank=True)
    descricao = models.CharField(max_length=200, blank=True, null=True)
    processo = models.ForeignKey(Processo, on_delete=models.CASCADE)
    item = models.ForeignKey(Itemizacao, 
                             on_delete=models.CASCADE,
                             null=True,
                             blank=True,
                             related_name='item')


    def __str__(self):
        return f"{self.nome}"


class UsuarioProcesso(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid4, editable=False)
    usuario = models.ForeignKey(User, on_delete=models.RESTRICT)
    processo = models.ForeignKey(Processo, on_delete=models.RESTRICT)
    status = models.CharField(max_length=45)
    data = models.DateTimeField(auto_now_add=True)
    log = models.TextField(max_length=1000, blank=True, null=True)

    def __str__(self):
        return f"{self.processo}"


def upload_to_user_directory(instance, filename):
    usuario_id = instance.usuarioProcesso.usuario.id
    processo_id = instance.usuarioProcesso.processo.id
    tarefa_id = instance.tarefaProcesso.id

    # Caminho completo para o diretório de destino
    directory_path = os.path.join(f'uploads/usuario_{usuario_id}/processo_{processo_id}/tarefa_{tarefa_id}')
    
    # Verifica se o diretório existe, se não, cria
    if not os.path.exists(os.path.join(settings.MEDIA_ROOT, directory_path)):
        os.makedirs(os.path.join(settings.MEDIA_ROOT, directory_path))

    # Retorna o caminho final do arquivo
    return os.path.join(directory_path, filename)


class UsuarioDocs(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid4, editable=False)
    tarefaProcesso = models.ForeignKey(TarefaProcesso, on_delete=models.RESTRICT)
    usuarioProcesso = models.ForeignKey(UsuarioProcesso, on_delete=models.CASCADE)
    file = models.FileField(upload_to=upload_to_user_directory, max_length=500)
    filename = models.CharField(max_length=255, blank=True)
    descricao = models.TextField(max_length=200, blank=True, null=True)
    quantidade = models.IntegerField(blank=True)
    qdeReajustada = models.IntegerField(blank=True, null=True)
    obsReajuste = models.TextField(blank=True, null=True)

    def delete(self, using=None, keep_parents=False):
        # Remove o arquivo físico antes de deletar o registro
        if self.file:
            self.file.delete(save=False)
        super().delete(using=using, keep_parents=keep_parents)

    def __str__(self):
        return f"{self.usuarioProcesso}"